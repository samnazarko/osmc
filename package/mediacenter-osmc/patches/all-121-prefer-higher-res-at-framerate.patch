From a50c11d1cae7896f152932fbf113642a2ce279f0 Mon Sep 17 00:00:00 2001
From: Graham Horner <graham@hornercs.co.uk>
Date: Wed, 15 Sep 2021 15:14:59 +0100
Subject: [PATCH] Resolutions: Sort whitelist lowres to highres

Whitelist: Prefer higher res at exact framerate

We look for an exact refreshrate at the lowest higher
resolution before searching for a suitable refreshrate at GUI resolution.
Also selects double refreshrate if available at correct res (fix
for change of mode 1-2 secs after video starts).
---
 xbmc/settings/DisplaySettings.cpp |  2 +-
 xbmc/utils/Variant.cpp            | 24 ++++++++++++++++++++++
 xbmc/utils/Variant.h              |  1 +
 xbmc/windowing/Resolution.cpp     | 34 ++++++++++++++++++++++++++++++-
 4 files changed, 59 insertions(+), 2 deletions(-)

diff --git a/xbmc/settings/DisplaySettings.cpp b/xbmc/settings/DisplaySettings.cpp
index 031ca0be96..75ce481a6c 100644
--- a/xbmc/settings/DisplaySettings.cpp
+++ b/xbmc/settings/DisplaySettings.cpp
@@ -703,7 +703,7 @@ RESOLUTION CDisplaySettings::GetResolutionForScreen()
 
 static inline bool ModeSort(const StringSettingOption& i, const StringSettingOption& j)
 {
-  return (i.value > j.value);
+  return (i.value < j.value);
 }
 
 void CDisplaySettings::SettingOptionsModesFiller(const std::shared_ptr<const CSetting>& setting,
diff --git a/xbmc/utils/Variant.cpp b/xbmc/utils/Variant.cpp
index 45ab7e19d7..260afe607d 100644
--- a/xbmc/utils/Variant.cpp
+++ b/xbmc/utils/Variant.cpp
@@ -548,6 +548,30 @@ bool CVariant::operator==(const CVariant &rhs) const
   return m_data == rhs.m_data;
 }
 
+bool CVariant::operator<(const CVariant &rhs) const
+{
+  if (type() == rhs.type())
+  {
+    switch (type())
+    {
+    case VariantTypeInteger:
+      return asInteger() < rhs.asInteger();
+    case VariantTypeUnsignedInteger:
+      return asUnsignedInteger() < rhs.asUnsignedInteger();
+    case VariantTypeDouble:
+      return asDouble() < rhs.asDouble();
+    case VariantTypeString:
+      return asString() < rhs.asString();
+    case VariantTypeWideString:
+      return asWideString() < rhs.asWideString();
+    default:
+      break;
+    }
+  }
+
+  return false;
+}
+
 void CVariant::reserve(size_t length)
 {
   if (type() == VariantTypeNull)
diff --git a/xbmc/utils/Variant.h b/xbmc/utils/Variant.h
index 0332048126..4f36821d8e 100644
--- a/xbmc/utils/Variant.h
+++ b/xbmc/utils/Variant.h
@@ -111,6 +111,7 @@ public:
   CVariant& operator=(CVariant&& rhs) noexcept;
   bool operator==(const CVariant &rhs) const;
   bool operator!=(const CVariant &rhs) const { return !(*this == rhs); }
+  bool operator<(const CVariant &rhs) const;
 
   void reserve(size_t length);
   void push_back(const CVariant &variant);
diff --git a/xbmc/windowing/Resolution.cpp b/xbmc/windowing/Resolution.cpp
index 951ec08035..270392c163 100644
--- a/xbmc/windowing/Resolution.cpp
+++ b/xbmc/windowing/Resolution.cpp
@@ -86,6 +86,11 @@ RESOLUTION CResolutionUtils::ChooseBestResolution(float fps, int width, int heig
   return res;
 }
 
+static inline bool ModeSort(CVariant i, CVariant j)
+{
+  return (i < j);
+}
+
 void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int height, bool is3D, RESOLUTION &resolution)
 {
   RESOLUTION_INFO curr = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(resolution);
@@ -124,6 +129,8 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
     }
   }
 
+  std::sort(indexList.begin(), indexList.end(), ModeSort);
+
   CLog::Log(LOGDEBUG, "[WHITELIST] Searching for an exact resolution with an exact refresh rate");
 
   unsigned int penalty = std::numeric_limits<unsigned int>::max();
@@ -179,7 +186,7 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
                   "[WHITELIST] Matched an exact resolution with double the refresh rate {} ({})",
                   info.strMode, i);
         unsigned int pen = abs(info.iScreenHeight - height) + abs(info.iScreenWidth - width);
-        if (pen < penalty)
+        if (pen <= penalty)
         {
           resolution = i;
           found = true;
@@ -234,6 +241,31 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
   }
 
 
+  /* Prefer upscaling at the correct framerate if available and specifically whitelisted
+   * eg for displays with 2160p25/50 but no 1080p25/50
+   */
+  if (HasWhitelist())
+  {
+    CLog::Log(LOGDEBUG, "[WHITELIST] Searching for higher resolutions with the exact refreshrate");
+    for (const auto& mode : indexList)
+    {
+      auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+
+      // pick the lowest resolution that has a matching refresh rate
+      if ((info.iScreenHeight >= height || info.iScreenWidth >= width) &&
+        (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
+          MathUtils::FloatEquals(info.fRefreshRate, fps, 0.01f))
+      {
+        resolution = i;
+        CLog::Log(LOGDEBUG, "[WHITELIST] Matched fuzzy whitelisted Resolution {} ({})", info.strMode, i);
+        return;
+      }
+    }
+  }
+
+
+  CLog::Log(LOGDEBUG, "[WHITELIST] No match for a higher resolution with an exact refresh rate");
   CLog::Log(LOGDEBUG, "[WHITELIST] Searching for a desktop resolution with an exact refresh rate");
 
   const RESOLUTION_INFO desktop_info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(CDisplaySettings::GetInstance().GetCurrentResolution());
-- 
2.34.1

